{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","App.js","index.js"],"names":["require","config","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","console","log","className","map","motion","div","key","layout","whileHover","opacity","onClick","url","img","src","alt","initial","animate","transition","delay","Modal","selectedImg","e","target","classList","contains","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","UploadForm","types","type","onChange","selected","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16d094f3.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\nrequire('dotenv').config();\r\n\r\nvar firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  const projectStorage = firebase.storage();\r\n  const projectFirestore = firebase.firestore();\r\n  const timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\n  export { projectFirestore, projectStorage, timestamp };\r\n  ","import { useState, useEffect } from \"react\";\r\nimport { projectFirestore } from \"../firebase/config\";\r\n\r\nconst useFirestore = (collection) => {\r\n    const [docs, setDocs ] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const unsub = projectFirestore.collection(collection)\r\n        .orderBy('createdAt', 'desc')\r\n        .onSnapshot((snap) => {\r\n            let documents = [];\r\n            snap.forEach(doc => {\r\n                documents.push({...doc.data(), id: doc.id})\r\n            });\r\n            setDocs(documents);\r\n        })\r\n\r\n        return () => unsub();\r\n    }, [collection])\r\n\r\n    return { docs };\r\n}\r\n\r\nexport default useFirestore;","import React from 'react'\r\nimport useFirestore from '../hooks/useFirestore'\r\nimport { motion } from 'framer-motion'\r\n\r\nconst ImageGrid = ({ setSelectedImg }) => {\r\n    const { docs } = useFirestore('images')\r\n    console.log(docs)\r\n\r\n    return (\r\n\r\n        <div className=\"img-grid\">\r\n            { docs && docs.map( doc => (\r\n               <motion.div className=\"img-wrap\" key={doc.id}\r\n               layout\r\n               whileHover={{ opacity: 1}}\r\n               onClick = {()=> setSelectedImg(doc.url)}\r\n               >\r\n                <motion.img src={doc.url} alt=\"uploaded pic\"\r\n                    initial={{ opacity: 0 }}\r\n                    animate={{ opacity: 1 }}\r\n                    transition = {{ delay: 1 }}\r\n                />\r\n               </motion.div> \r\n            ) ) }\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default ImageGrid;","import React from 'react'\r\nimport { motion } from 'framer-motion';\r\n\r\nconst Modal = ({selectedImg, setSelectedImg }) => {\r\n\r\n    const handleClick = (e) => {\r\n        if(e.target.classList.contains('backdrop')){\r\n           setSelectedImg(null); \r\n        }\r\n    }\r\n\r\n    return(\r\n        <motion.div className=\"backdrop\" onClick={handleClick}\r\n            initial={{opacity: 0}}\r\n            animate={{opacity: 1}}\r\n        >\r\n            <motion.img src={selectedImg} alt=\"enlarged pic\" \r\n                initial={{ y: \"-100vh\" }}\r\n                animate={{ y:0}}\r\n            />\r\n        </motion.div>\r\n    )\r\n\r\n}\r\n\r\nexport default Modal;","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>PixelGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Share your pictures with the world</p>\n    </div>\n  )\n}\n\nexport default Title;","import { useState, useEffect } from \"react\";\r\nimport { projectStorage, projectFirestore, timestamp} from '../firebase/config'\r\n\r\nconst useStorage = (file) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [url, setUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        //references\r\n        const storageRef = projectStorage.ref(file.name);\r\n        const collectionRef = projectFirestore.collection('images') //collection called images\r\n        //As put is an asynchronous function, we keep a track of the % of the file uploaded with the help of .on() when state is changed, this function may run multiple times as the file uploads\r\n        storageRef.put(file).on('state_changed',(snap) => {\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setProgress(percentage);\r\n        }, (err) => {\r\n            setError(err);\r\n        }, async () => {\r\n            const url = await storageRef.getDownloadURL();\r\n            const createdAt = timestamp();\r\n            collectionRef.add({ url, createdAt });\r\n            setUrl(url);\r\n        })\r\n    }, [file]) //file is a dependency here, the function will run everytime the value of file changes\r\n\r\n    return { progress, url, error}\r\n\r\n}\r\n\r\nexport default useStorage;","import React, {useEffect} from 'react';\r\nimport useStorage from '../hooks/useStorage';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst ProgressBar = ({ file, setFile }) => {\r\n\r\n    const { url, progress } = useStorage(file);\r\n\r\n    useEffect(() => {\r\n        if(url){\r\n            setFile(null);\r\n        }\r\n    }, [url, setFile])\r\n\r\n    return (\r\n        <motion.div className = \"progress-bar\"\r\n            initial={{ width: 0}}\r\n            animate={{ width: progress + '%'}}\r\n        ></motion.div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProgressBar;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport ProgressBar from './ProgressBar';\r\n\r\nconst UploadForm = () => {\r\n\r\n    const [file, setFile] = useState(null); //We set the initial value of file to null\r\n    const [error, setError] = useState(null);\r\n\r\n    const types = ['image/png', 'image/jpeg'];\r\n\r\n    const changeHandler = (e) => {\r\n        let selected = e.target.files[0]; //In case a user uploads multiple files, we take only the first file\r\n\r\n        if(selected && types.includes(selected.type)) { //Only if a file is selected and is of the allowed type, i.e. png and jpeg\r\n            setFile(selected);\r\n            setError(null);\r\n        } else {\r\n            setFile(null);\r\n            setError('Please select image of the type png or jpeg');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            <input type=\"file\" onChange = {changeHandler} />\r\n            <div className=\"output\">\r\n                { error && <div className=\"error\"> { error } </div> }\r\n                { file && <div> { file.name } </div> }\r\n                { file && <ProgressBar file={file} setFile = {setFile} /> }\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nexport default UploadForm;","import React, { useState } from 'react';\nimport ImageGrid from './comps/ImageGrid';\nimport Modal from './comps/Modal';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\n\nfunction App() {\n\n  const [selectedImg, setSelectedImg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg}/>\n      { selectedImg && <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg}/>}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}